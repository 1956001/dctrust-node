// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ws.proto

package api_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ff87931dac4ca82, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type SubscribeResponse struct {
	Query                string                     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Data                 *any.Any                   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Events               []*SubscribeResponse_Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ff87931dac4ca82, []int{1}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SubscribeResponse) GetData() *any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubscribeResponse) GetEvents() []*SubscribeResponse_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type SubscribeResponse_Event struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Events               []string `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse_Event) Reset()         { *m = SubscribeResponse_Event{} }
func (m *SubscribeResponse_Event) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse_Event) ProtoMessage()    {}
func (*SubscribeResponse_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ff87931dac4ca82, []int{1, 0}
}

func (m *SubscribeResponse_Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse_Event.Unmarshal(m, b)
}
func (m *SubscribeResponse_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse_Event.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse_Event.Merge(m, src)
}
func (m *SubscribeResponse_Event) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse_Event.Size(m)
}
func (m *SubscribeResponse_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse_Event.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse_Event proto.InternalMessageInfo

func (m *SubscribeResponse_Event) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SubscribeResponse_Event) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "api_pb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "api_pb.SubscribeResponse")
	proto.RegisterType((*SubscribeResponse_Event)(nil), "api_pb.SubscribeResponse.Event")
}

func init() { proto.RegisterFile("ws.proto", fileDescriptor_7ff87931dac4ca82) }

var fileDescriptor_7ff87931dac4ca82 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0x86, 0x95, 0xe4, 0x35, 0x6a, 0xa6, 0x6f, 0x11, 0xac, 0x0a, 0xa5, 0x11, 0x12, 0x51, 0x56,
	0x5e, 0x39, 0x10, 0x16, 0xac, 0x41, 0xe2, 0x02, 0xa9, 0x04, 0x12, 0x1b, 0x64, 0x87, 0xa1, 0x0a,
	0x45, 0x76, 0x1a, 0x3b, 0x45, 0xd9, 0x72, 0x05, 0x0e, 0xc4, 0x21, 0xb8, 0x02, 0x07, 0x41, 0x8d,
	0x93, 0x0a, 0x89, 0xb2, 0xf3, 0xf8, 0xff, 0xc6, 0x9f, 0x67, 0x60, 0xfa, 0xaa, 0x59, 0xdd, 0x28,
	0xa3, 0x88, 0xcf, 0xeb, 0xea, 0xa1, 0x16, 0xf1, 0xc9, 0x4a, 0xa9, 0xd5, 0x0b, 0x66, 0xbc, 0xae,
	0x32, 0x2e, 0xa5, 0x32, 0xdc, 0x54, 0x4a, 0x0e, 0x54, 0xbc, 0x18, 0xd2, 0xbe, 0x12, 0xed, 0x53,
	0xc6, 0x65, 0x67, 0xa3, 0x94, 0x42, 0xb8, 0x6c, 0x85, 0x2e, 0x9b, 0x4a, 0x60, 0x81, 0x9b, 0x16,
	0xb5, 0x21, 0x73, 0x98, 0x6c, 0x5a, 0x6c, 0xba, 0xc8, 0x49, 0x1c, 0x1a, 0x14, 0xb6, 0x48, 0x3f,
	0x1c, 0x38, 0xfa, 0x81, 0xea, 0x5a, 0x49, 0x8d, 0x87, 0x59, 0x42, 0xe1, 0xdf, 0x23, 0x37, 0x3c,
	0x72, 0x13, 0x87, 0xce, 0xf2, 0x39, 0xb3, 0x7e, 0x36, 0xfa, 0xd9, 0x95, 0xec, 0x8a, 0x9e, 0x20,
	0x97, 0xe0, 0xe3, 0x16, 0xa5, 0xd1, 0x91, 0x97, 0x78, 0x74, 0x96, 0x9f, 0x32, 0x3b, 0x11, 0xfb,
	0xa5, 0x62, 0x37, 0x3b, 0xae, 0x18, 0xf0, 0xf8, 0x1c, 0x26, 0xfd, 0x05, 0x09, 0xc1, 0x5b, 0xe3,
	0xe8, 0xdf, 0x1d, 0xc9, 0xf1, 0xfe, 0x4d, 0x37, 0xf1, 0x68, 0x30, 0xb6, 0xe4, 0xcf, 0x10, 0xde,
	0xa1, 0xd0, 0xaa, 0x5c, 0xa3, 0x59, 0x62, 0xb3, 0xad, 0x4a, 0x24, 0xb7, 0x10, 0xec, 0x4d, 0x24,
	0x3a, 0x20, 0xef, 0x57, 0x12, 0x2f, 0xfe, 0xfc, 0x56, 0x4a, 0xde, 0x3e, 0xbf, 0xde, 0xdd, 0xff,
	0x04, 0x32, 0x3d, 0x66, 0x67, 0xce, 0x35, 0xdc, 0x4f, 0x59, 0x66, 0x7b, 0x84, 0xdf, 0xcf, 0x7d,
	0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x78, 0xfa, 0xa2, 0x3b, 0xb7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebsocketServiceClient is the client API for WebsocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebsocketServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (WebsocketService_SubscribeClient, error)
}

type websocketServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebsocketServiceClient(cc *grpc.ClientConn) WebsocketServiceClient {
	return &websocketServiceClient{cc}
}

func (c *websocketServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (WebsocketService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WebsocketService_serviceDesc.Streams[0], "/api_pb.WebsocketService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &websocketServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebsocketService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type websocketServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *websocketServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebsocketServiceServer is the server API for WebsocketService service.
type WebsocketServiceServer interface {
	Subscribe(*SubscribeRequest, WebsocketService_SubscribeServer) error
}

// UnimplementedWebsocketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWebsocketServiceServer struct {
}

func (*UnimplementedWebsocketServiceServer) Subscribe(req *SubscribeRequest, srv WebsocketService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterWebsocketServiceServer(s *grpc.Server, srv WebsocketServiceServer) {
	s.RegisterService(&_WebsocketService_serviceDesc, srv)
}

func _WebsocketService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebsocketServiceServer).Subscribe(m, &websocketServiceSubscribeServer{stream})
}

type WebsocketService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type websocketServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *websocketServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WebsocketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api_pb.WebsocketService",
	HandlerType: (*WebsocketServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WebsocketService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ws.proto",
}
